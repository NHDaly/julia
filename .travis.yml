language: cpp
sudo: required
dist: trusty
matrix:
  include:
    - os: osx
      env: ARCH="x86_64"
      osx_image: xcode8
cache:
  directories:
    - $TRAVIS_BUILD_DIR/deps/srccache
    - $TRAVIS_BUILD_DIR/deps/scratch
    - $TRAVIS_BUILD_DIR/deps/usr-staging
branches:
  only:
    - master
    - /^release-.*/
    - /^v\d+\.\d+\.\d+$/
    - ApplicationBuilder/julia.customBuild  # (NHDALY): My custom branch.
notifications:
    email: false
before_install:
    - make check-whitespace
    - if [ `uname` = "Linux" ]; then
        contrib/travis_fastfail.sh || exit 1;
        mkdir -p $HOME/bin;
        ln -s /usr/bin/gcc-5 $HOME/bin/gcc;
        ln -s /usr/bin/g++-5 $HOME/bin/g++;
        ln -s /usr/bin/gfortran-5 $HOME/bin/gfortran;
        ln -s /usr/bin/gcc-5 $HOME/bin/x86_64-linux-gnu-gcc;
        ln -s /usr/bin/g++-5 $HOME/bin/x86_64-linux-gnu-g++;
        gcc --version;
        BAR="bar -i 30";
        BUILDOPTS="-j5 VERBOSE=1 FORCE_ASSERTIONS=1 LLVM_ASSERTIONS=1";
        if [ "$ARCH" = "x86_64" ]; then
            BUILDOPTS="$BUILDOPTS JULIA_CPU_TARGET=x86-64";
        else
            BUILDOPTS="$BUILDOPTS JULIA_CPU_TARGET=pentium4 MARCH=pentium4 CFLAGS=-mfpmath=sse";
        fi;
        echo "override ARCH=$ARCH" >> Make.user;
        sudo sh -c "echo 0 > /proc/sys/net/ipv6/conf/lo/disable_ipv6";
        export JULIA_CPU_CORES=4;
        export JULIA_TEST_MAXRSS_MB=1200;
        TESTSTORUN="all";
      elif [ `uname` = "Darwin" ]; then
        brew update;
        brew install -v jq pv;
        BAR="pv -i 30";
        contrib/travis_fastfail.sh || exit 1;
        brew tap staticfloat/julia;
        brew rm --force $(brew deps --HEAD julia);
        brew install -v --only-dependencies --HEAD julia;
        brew install -v staticfloat/juliadeps/libgfortran llvm39-julia;
        BUILDOPTS="-j3 USECLANG=1 LLVM_CONFIG=$(brew --prefix llvm39-julia)/bin/llvm-config LLVM_SIZE=$(brew --prefix llvm39-julia)/bin/llvm-size";
        BUILDOPTS="$BUILDOPTS VERBOSE=1 USE_BLAS64=0 SUITESPARSE_INC=-I$(brew --prefix suite-sparse-julia)/include FORCE_ASSERTIONS=1";
        BUILDOPTS="$BUILDOPTS LIBBLAS=-lopenblas LIBBLASNAME=libopenblas LIBLAPACK=-lopenblas LIBLAPACKNAME=libopenblas";
        for lib in LLVM SUITESPARSE ARPACK BLAS FFTW LAPACK GMP MPFR PCRE LIBUNWIND; do
            BUILDOPTS="$BUILDOPTS USE_SYSTEM_$lib=1";
        done;
        export LDFLAGS="-L$(brew --prefix openblas-julia)/lib -L$(brew --prefix suite-sparse-julia)/lib";
        export DYLD_FALLBACK_LIBRARY_PATH="/usr/local/lib:/lib:/usr/lib:$(brew --prefix openblas-julia)/lib:$(brew --prefix suite-sparse-julia)/lib:$(brew --prefix arpack-julia)/lib";
        export JULIA_MACOS_SPAWN="DYLD_FALLBACK_LIBRARY_PATH=\"$DYLD_FALLBACK_LIBRARY_PATH\" \$1";
        export BUILDOPTS="$BUILDOPTS spawn=\$(JULIA_MACOS_SPAWN)";
        make $BUILDOPTS -C contrib -f repackage_system_suitesparse4.make;
        export JULIA_CPU_CORES=2;
        export JULIA_TEST_MAXRSS_MB=600;
        TESTSTORUN="all --skip linalg/triangular subarray"; fi # TODO: re enable these if possible without timing out
    - if [ `uname` = "Darwin" ]; then echo "USE_SYSTEM_LIBUNWIND=1" >> Make.user; fi  # (NHDALY): This was added to fix the build.
    - wget http://http.debian.net/debian/pool/main/m/moreutils/moreutils_0.62.orig.tar.xz
    - tar -xJvf moreutils_0.62.orig.tar.xz && mv moreutils-0.62 moreutils
script:
    - echo BUILDOPTS=$BUILDOPTS
    - export BUILDOPTS
    # compile / install dependencies
    - contrib/download_cmake.sh
    - make -C moreutils mispipe
    - make $BUILDOPTS -C base version_git.jl.phony
    # Check that the llvm cache is not poisoned
    - if [ -f deps/srccache/llvm-3.9.1/llvm-D37939-Mem2Reg-Also-handle-memcpy.patch-applied ]; then
      make -C deps distclean-llvm; fi
    # capture the log, but only print it if `make deps` fails
    # try to show the end of the log first, because this log might be very long (> 4MB)
    # and thus be truncated by travis
    - moreutils/mispipe "make \$BUILDOPTS NO_GIT=1 -C deps 2> deps-err.log" "$BAR" > deps.log ||
        { echo "-- deps build log stderr tail 100 --------------------------------------";
          tail -n 100 deps-err.log;
          echo "-- deps build log stdout tail 100 --------------------------------------";
          tail -n 100 deps.log;
          echo "-- deps build log stderr all -------------------------------------------";
          cat deps-err.log;
          echo "-- deps build log stdout all -------------------------------------------";
          cat deps.log;
          echo "-- end of deps build log -----------------------------------------------";
          false; }
    # compile / install Julia
    - make $BUILDOPTS NO_GIT=1 prefix=/tmp/julia install | moreutils/ts -s "%.s"
    - make $BUILDOPTS NO_GIT=1 build-stats
    - du -sk /tmp/julia/*
    - if [ `uname` = "Darwin" ]; then
        for name in suitesparseconfig spqr umfpack colamd cholmod amd suitesparse_wrapper; do
            install -pm755 usr/lib/lib${name}*.dylib* /tmp/julia/lib/julia/;
        done;
      fi
    - cd .. && mv julia julia2
    # run tests
    - /tmp/julia/bin/julia --precompiled=no -e 'true' &&
        /tmp/julia/bin/julia-debug --precompiled=no -e 'true'
    - /tmp/julia/bin/julia -e 'versioninfo()'
    - pushd /tmp/julia/share/julia/test
    - /tmp/julia/bin/julia --check-bounds=yes runtests.jl $TESTSTORUN &&
      /tmp/julia/bin/julia --check-bounds=yes runtests.jl libgit2-online download pkg
    - popd
    # test that the embedding code works on our installation
    - mkdir /tmp/embedding-test &&
        make check -C /tmp/julia/share/doc/julia/examples/embedding \
             JULIA="DYLD_FALLBACK_LIBRARY_PATH='$DYLD_FALLBACK_LIBRARY_PATH' /tmp/julia/bin/julia" \
             BIN=/tmp/embedding-test \
             "$(cd julia2 && make print-CC)"
    # restore initial state and prepare for travis caching
    - mv julia2 julia &&
        rm -f julia/deps/scratch/libgit2-*/CMakeFiles/CMakeOutput.log
    # (NHDALY): This creates the release.
    - if [ `uname` = "Darwin" ]; then
        zip -r release.zip /tmp/julia; fi
# uncomment the following if failures are suspected to be due to the out-of-memory killer
#    - dmesg
# after_success:
#     - cd julia && make -C doc deploy

-deploy:
  provider: releases
  api_key:
    secure: rIj35LAY3Db5+EDGqX1BIe6SfjeioCyMTT4KD9E+Pk14ScwrSJBA2DHpmWE/jjbjuyoOLRJC0IS4mfWyfy5e5Lh2JKBo0Ov6khSw+RZ+QcQcv6fe5LooqOX3hCsJToKSM/iY2ULMsiKBWEJB7GRewR2W570j6SEkQ6HDbxaKKy2z53e4ZmLLUbWE1HUx0VfWVtCzIr4DGCArNES2KDWhqotH7hGMgr2JhYgUnhK1YUNjEjO3URrNOU7MbQBN3rOuXBDb9PB6v5yGgHHUZVuxDObHZ+qe1nafZYXbSTUcy6i5t5ZTWZoxuTL7Tnn5dwhbfpoGOiMhpkHSDrILGtJydNVd6hgve3hfKZm6L320C4f+d50uy3zBN5r4R4BhN9qSzK0/5t5536TnUduLOfu4xEhDeC/jefGShilxwy+TFrrSnTIEl3JpbV2Yd4z7+0uKq5spR9L12zXiqiR/V9AHdntxu2tDdbb6lL6T/Hm8PJvGGIR/EaBRG9nPTP9UshvAvefuUmoPn7KvPjbG3o7okaFDvzKK/NEt/7iQPUx4cAf8SStgGdR1YVcCyecmhlSVwEFqCHFAGFkE2ZltlLmlYfQ90SVWLeQFClPd2HkkUyrsvfEqyzKSOCDBfv7uNOdGAjhHIKY0XVTDi9cGs3R8ziRIYVbpcVZVpKhRBzWXg0k=
  file: release.zip
  skip_cleanup: true
